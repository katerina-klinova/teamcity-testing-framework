name: TeamCity Tests

on:  [push, pull_request]

jobs:
  run_teamcity_tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'zulu'

      - name: Install ifconfig
        run: sudo apt-get update && sudo apt-get install -y net-tools

      - name: Setup $HOST environment variable
        run: |
          echo "HOST=$(ifconfig | grep -E "([0-9]{1,3}\.){3}[0-9]{1,3}" | grep -v 127.0.0.1 | awk '{ print $2 }' | cut -f2 -d: | head -n1)" >> $GITHUB_ENV

      - name: Host is
        run: |
          echo $HOST

      - name: Set up config properties
        run: |
          echo "host=$HOST:8111" > src/main/resources/config.properties
          echo "remote=http://$HOST:4444/wd/hub" >> src/main/resources/config.properties
          echo "browser=firefox" >> src/main/resources/config.properties
          echo "maxRetryCount=1" >> src/main/resources/config.properties
          cat  src/main/resources/config.properties

      #      - name: Pull Selenoid Chrome
      #        run: docker pull selenoid/vnc_chrome:119.0
      - name: Pull Selenoid Firefox
        run: docker pull selenoid/vnc:firefox_122.0

      - name: Run Selenoid
        # Flag -d runs the container in background and print container.
        # Not running the container in background would prevent the pipeline from proceeding to the next step
        # as the container log runs the whole time while the container is running
        run: |
          docker run -d --name selenoid \
          -v /var/run/docker.sock:/var/run/docker.sock \
          -v /home/runner/work/teamcity-testing-framework/teamcity-testing-framework/selenoid/config/:/etc/selenoid/:ro \
          -p 4444:4444 \
          aerokube/selenoid:latest-release

      - name: Run Selenoid UI
        # This step has most value for local debugging with act
        run: |
          docker run -d --name selenoid-ui \
          -p 8080:8080 \
          aerokube/selenoid-ui \
          --selenoid-uri http://$HOST:4444

      - name: Run TeamCity server
        # Flags -u 0 start the container on behalf of root to have enough permissions to write files that are listed in volume.
        # A better option would run chown -R 1000:1000 for these directories and start the container without these flags
        # but this adds complexity to the pipeline and is not a priority at this moment.
        # Setting certain versions of TeamCity Server and Agent as locators may change in other versions.
        run: |
          docker run -u 0 -d --name teamcity-server \
          -v /home/runner/work/teamcity-testing-framework/teamcity-testing-framework/tmp/teamcity_server/datadir:/data/teamcity_server/datadir \
          -v /home/runner/work/teamcity-testing-framework/teamcity-testing-framework/tmp/teamcity_server/logs:/opt/teamcity/logs \
          -p 8111:8111 \
          jetbrains/teamcity-server:2023.11.1

#      - name: Wait for TeamCity server to start
#        run: sleep 10

      - name: Check TeamCity server logs
        run: docker logs teamcity-server

      - name: Check that Selenoid and TeamCity Endpoints are available
        run: |
          curl -v http://$HOST:8111 || echo "TeamCity server is not accessible"
          curl -v http://$HOST:4444/wd/hub || echo "http://$HOST:4444/wd/hub is not accessible"

      - name: Give execute permissions to mvnw
        run: chmod +x ./mvnw

      - name: Set up TeamCity server
        # Server setup (accepting licence, database selection, etc.) in the form of test
        run: ./mvnw --quiet clean test -Dtest=SetupTest#startUpTest

      #      - name: Run TeamCity agent
        # #This step starts a TeamCity agent that is needed to run builds
      #        run: |
      #          docker run -e SERVER_URL=http://$HOST:8111 -u 0 -d --name teamcity-agent \
      #          -v /home/runner/work/teamcity-testing-framework/teamcity-testing-framework/tmp/teamcity_agent/conf:/data/teamcity_agent/conf \
      #          jetbrains/teamcity-agent:2023.11.1

      - name: Set up superUserToken environment variable
        # Search the TeamCity Server logs for the last mention of 'Super user authentication token: ' ; the toke is the 6th word
        run: |
          echo "SUPER_USER_TOKEN=$(docker logs teamcity-server | grep 'Super user authentication token: ' | tail -n 1 | awk '{print $6}')" >> $GITHUB_ENV

      - name: Set up superUserToken config property
        run: |
          echo "superUserToken=$SUPER_USER_TOKEN" >> src/main/resources/config.properties
          echo "superUserToken=$SUPER_USER_TOKEN"

      #      - name: Set up TeamCity agent
      #        # This step configures the TeamCity agent to run builds
      #        # Not doing 'clean' to get setup tests in the final report
      #        run: ./mvnw --quiet test -Dtest=SetupTest#setupTeamCityAgentTest

      - name: Run Checkstyle
        run: mvn validate -Dcheckstyle.failOnViolation=true

      - name: Run tests
        # Running the tests with group provided in order not run TeamCity Server and Agent setup tests again
        run: ./mvnw test -DincludeGroups=Regression

#          -Dtest=Regression

      - name: Download and extract swagger-coverage
        run: |
          wget https://github.com/viclovsky/swagger-coverage/releases/download/1.5.0/swagger-coverage-1.5.0.zip
          unzip swagger-coverage-1.5.0.zip

      - name: Run Swagger coverage
        # API test coverage report based off of Swagger. Documentation: https://github.com/viclovsky/swagger-coverage
        if: always()
        run: swagger-coverage-commandline-1.5.0/bin/swagger-coverage-commandline -s http://$HOST:8111/app/rest/swagger.json -i swagger-coverage-output -q

      - name: Save Swagger coverage report
        # Save Swagger coverage report in GitHub Actions Artifacts of the run
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: swagger-coverage
          path: |
            swagger-coverage-report.html
            swagger-coverage-results.json

      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: |
            target/surefire-reports/*.png
            target/surefire-reports/*.html
          retention-days: 5

      - name: Load test report history
        uses: actions/checkout@v4
        if: always()
        continue-on-error: true
        with:
          ref: gh-pages
          path: gh-pages

      - name: Build test report
        uses: simple-elf/allure-report-action@v1.7
        if: always()
        with:
          gh_pages: gh-pages
          allure_history: allure-history
          allure_results: target/allure-results

      - name: Publish test report
        uses: peaceiris/actions-gh-pages@v4
        if: always()
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_branch: gh-pages
          publish_dir: allure-history