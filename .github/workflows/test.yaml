name: TeamCity Tests

on: push

jobs:
  run_teamcity_tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'zulu'

      - name: Install ifconfig
        run: sudo apt-get update && sudo apt-get install -y net-tools

      - name: ifconfig output
        run:  |
          ifconfig | grep -E "([0-9]{1,3}\.){3}[0-9]{1,3}" | grep -v 127.0.0.1 | awk '{ print $2 }' | cut -f2 -d: | head -n1

      - name: Setup host environment variables
        run: |
          echo "HOST=$(ifconfig | grep -E "([0-9]{1,3}\.){3}[0-9]{1,3}" | grep -v 127.0.0.1 | awk '{ print $2 }' | cut -f2 -d: | head -n1)" >> $GITHUB_ENV
          echo "HOST = $HOST"

      - name: Host is
        run: |
          echo $HOST

      - name: Set up host config property
#        run: echo "host=$HOST:8111" >> src/main/resources/config.properties
        run: | 
          echo "host=$HOST:8111" > src/main/resources/config.properties
          echo "remote=http://localhost:4444/wd/hub" >> src/main/resources/config.properties
          echo "browser=firefox" >> src/main/resources/config.properties
          cat  src/main/resources/config.properties

#      - name: Pull Selenoid Chrome
#        run: docker pull selenoid/vnc_chrome:119.0
      - name: Pull Selenoid Firefox
        run: docker pull selenoid/vnc:firefox_89.0

#      - name: Ensure Docker Daemon is Running
#        run: |
#          sudo systemctl start docker
#          sudo systemctl status docker
#
      - name: Create Docker Network
        run: docker network create selenoid-net

      - name: PWD
        run: pwd

      - name: ls
        run: ls -la

      - name: cat /home/runner/work/teamcity-testing-framework/teamcity-testing-framework/selenoid/config/browsers.json
        run: cat /home/runner/work/teamcity-testing-framework/teamcity-testing-framework/selenoid/config/browsers.json

      - name: Run Selenoid
        # Флаг -d запускает контейнер в фоновом режиме (так как, например, контейнер с сервером не имеет окончания, он просто всегда включен,
        # и если мы без этого флага в него перейдем, то никогда не сможем перешагнуть к следующему степу
        run: |
          docker run -d --name selenoid --network selenoid-net \
          -v /var/run/docker.sock:/var/run/docker.sock \
          -v /home/runner/work/teamcity-testing-framework/teamcity-testing-framework/selenoid/config/:/etc/selenoid/:ro \
          -p 4444:4444 \
          aerokube/selenoid:latest-release
          
      - name: List Docker Containers
        run: docker ps -a

      - name: Check Selenoid Logs
        run: docker logs selenoid || echo "No logs available for Selenoid container"

      # В этом степе нет смысла, так как через GitHub Actions нет доступа к Selenoid UI. Но зато это полезно при локальном запуске через act, для отладки
      - name: Run Selenoid UI
        run: |
          docker run -d --name selenoid-ui --network selenoid-net \
          -p 8080:8080 \
          aerokube/selenoid-ui \
          --selenoid-uri http://$HOST:4444

      - name: Run TeamCity server
        # Флаг -u 0 запускает контейнер от имени root, чтобы был доступ на запись файлов в директории, указанные в volume.
        # По-хорошему, надо делать chown -R 1000:1000 на эти директории и запускать контейнер без этого флага,
        # но это усложнение пайплайна и не приоритет в контексте данного задания.
        # Указываем конкретную версию для сервера и агента, так как мало ли, в новой версии могут поменяться используемые локаторы,
        # чтобы в рамках этого задания не тратить время на фикс подобных проблем.
        run: |
          docker run -u 0 -d --name teamcity-server  --network selenoid-net \
          -v $(pwd)/tmp/teamcity_server/datadir:/data/teamcity_server/datadir \
          -v $(pwd)/tmp/teamcity_server/logs:/opt/teamcity/logs \
          -p 8111:8111 \
          jetbrains/teamcity-server:2023.11.1

      - name: Give execute permissions to mvnw
        run: chmod +x ./mvnw

      - name: Set up TeamCity server
      # Настройка сервера при первом запуске (принятие лицензии, выбор базы данных и т.д.), реализованная в виде теста
        run: ./mvnw clean test -Dtest=SetupTest#startUpTest -X

      - name: Set up superUserToken environment variable
      # Берем из лога контейнера строку с последним упоминанием токена, из нее 6-е слово, что соответствует токену
      #  run: echo "SUPER_USER_TOKEN=$(docker logs teamcity-server | grep 'Super user authentication token: ' | tail -n 1 | awk '{print $6}')" >> $GITHUB_ENV
        run: |
          TOKEN_LINE=$(docker logs teamcity-server | grep 'Super user authentication token: ' | tail -n 1)
          echo "TOKEN_LINE: $TOKEN_LINE"
          SUPER_USER_TOKEN=$(echo $TOKEN_LINE | awk '{print $6}')
          echo "SUPER_USER_TOKEN=$SUPER_USER_TOKEN" >> $GITHUB_ENV
          echo "Extracted SUPER_USER_TOKEN: $SUPER_USER_TOKEN"

      - name: Set up superUserToken config property
        run: |
          echo "superUserToken=$SUPER_USER_TOKEN" >> src/main/resources/config.properties
          echo "superUserToken=$SUPER_USER_TOKEN"

      - name: Run TeamCity agent
        run: |
          docker run -e SERVER_URL=http://$HOST:8111 -u 0 -d --name teamcity-agent \
          -v $(pwd)/tmp/teamcity_agent/conf:/data/teamcity_agent/conf \
          jetbrains/teamcity-agent:2023.11.1

      - name: Set up TeamCity agent
        # Авторизация агента при первом запуске, реализованная в виде теста
        # Не указываем clean, чтобы потом в итоговом репорте были и setup тесты
        run: ./mvnw test -Dtest=SetupTest#setupTeamCityAgentTest -X

      - name: Run tests
      # Указываем группу, чтобы еще раз не запустить тесты, которые использовались для сетапа сервера и агента
        run: ./mvnw test

      - name: Load test report history
        uses: actions/checkout@v4
        if: always()
        continue-on-error: true
        with:
          ref: gh-pages
          path: gh-pages

      - name: Build test report
        uses: simple-elf/allure-report-action@v1.7
        if: always()
        with:
          gh_pages: gh-pages
          allure_history: allure-history
          allure_results: target/allure-results

      - name: Publish test report
        uses: peaceiris/actions-gh-pages@v3
        if: always()
        with:
          github_token: $
          publish_branch: gh-pages
          publish_dir: allure-history